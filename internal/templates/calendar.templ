package templates

import (
	"fmt"
	"math"
	"time"
)

type TimeBlock struct {
	Name       string
	Start, End time.Time
}

type renderedBlock struct {
	Name       string
	Start, End float64
}

type renderedDay struct {
	Start  time.Time
	Blocks []renderedBlock
}

func renderBlocks(tz *time.Location, blocks []TimeBlock) []renderedDay {
	start := time.Time{}
	end := time.Time{}
	for _, b := range blocks {
		if start == (time.Time{}) || b.Start.Before(start) {
			start = b.Start
		}
		if end == (time.Time{}) || b.End.After(end) {
			end = b.End
		}
	}

	start = time.Date(start.Year(), start.Month(), start.Day(), 0, 0, 0, 0, tz)
	dayCount := int(math.Ceil(end.Sub(start).Hours() / 24))

	var days []renderedDay
	for i := 0; i < dayCount; i++ {
		dayStart := start.AddDate(0, 0, i)
		dayEnd := dayStart.AddDate(0, 0, 1).Add(-time.Nanosecond)

		var dayblocks []renderedBlock
		for _, b := range blocks {
			if b.Start.Before(dayStart) && b.End.Before(dayStart) {
				continue
			}
			if b.Start.After(dayEnd) && b.End.After(dayEnd) {
				continue
			}

			if b.Start.Before(dayStart) {
				b.Start = dayStart
			}
			if b.End.After(dayEnd) {
				b.End = dayEnd
			}
			dayblocks = append(dayblocks, renderedBlock{
				Name:  b.Name,
				Start: float64(b.Start.Sub(dayStart).Minutes()) / float64(24*60),
				End:   float64(b.End.Sub(dayStart).Minutes()) / float64(24*60),
			})
		}

		days = append(days, renderedDay{
			Start:  dayStart,
			Blocks: dayblocks,
		})
	}

	return days
}

templ Day(day renderedDay) {
	<div class="flex flex-col gap-3 min-w-[180px]">
		<h3 class="text-xl font-bold">{ fmt.Sprint(day.Start.Day()) }</h3>
		<div class="relative fit-content">
			<div class="flex flex-col w-full">
				for i := range 24 {
					<div class="flex-1 w-full min-h-[100px]">
						<p class="text-sm">{ fmt.Sprint(i) }</p>
					</div>
				}
			</div>
			for _, b := range day.Blocks {
				{{ style := fmt.Sprintf("top: %f%%; height: %f%%", b.Start*100, (b.End-b.Start)*100) }}
				<div
					class="absolute bg-red-500 left-0 w-full rounded-sm shadow-lg p-1 border-red-600 border-b-1"
					{ templ.Attributes{"style": style}... }
				>
					<p>{ b.Name }</p>
				</div>
			}
		</div>
	</div>
}

templ DayList(tz *time.Location, blocks []TimeBlock) {
	{{ days := renderBlocks(tz, blocks) }}
	if len(days) > 0 {
		<div class="flex flex-col gap-3">
			<h1 class="text-2xl font-bold">{ fmt.Sprint(days[0].Start.Month()) }</h1>
			<div class="flex gap-2">
				for _, d := range days {
					@Day(d)
				}
			</div>
		</div>
	}
}
