// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"time"
)

const createProject = `-- name: CreateProject :one
insert into project(name, description, deadline) values (?, ?, ?)
returning id
`

type CreateProjectParams struct {
	Name        string
	Description string
	Deadline    time.Time
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createProject, arg.Name, arg.Description, arg.Deadline)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createProjectTask = `-- name: CreateProjectTask :one
insert into project_task(project_id, name, description, size) values (?, ?, ?, ?)
returning id
`

type CreateProjectTaskParams struct {
	ProjectID   int64
	Name        string
	Description string
	Size        int64
}

func (q *Queries) CreateProjectTask(ctx context.Context, arg CreateProjectTaskParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createProjectTask,
		arg.ProjectID,
		arg.Name,
		arg.Description,
		arg.Size,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createQuota = `-- name: CreateQuota :one
insert into quota(fixed_time, duration, recurrence_interval) values (?, ?, ?)
returning id
`

type CreateQuotaParams struct {
	FixedTime          int64
	Duration           int64
	RecurrenceInterval int64
}

func (q *Queries) CreateQuota(ctx context.Context, arg CreateQuotaParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createQuota, arg.FixedTime, arg.Duration, arg.RecurrenceInterval)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createTask = `-- name: CreateTask :one
insert into task(name, description, deadline, size, priority) values (?, ?, ?, ?, ?)
returning id
`

type CreateTaskParams struct {
	Name        string
	Description string
	Deadline    time.Time
	Size        int64
	Priority    int64
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.Name,
		arg.Description,
		arg.Deadline,
		arg.Size,
		arg.Priority,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteProject = `-- name: DeleteProject :exec
update project set deleted_at = datetime('now') where id = ?
`

func (q *Queries) DeleteProject(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProject, id)
	return err
}

const deleteProjectTask = `-- name: DeleteProjectTask :exec
update project_task set deleted_at = datetime('now') where id = ?
`

func (q *Queries) DeleteProjectTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProjectTask, id)
	return err
}

const deleteQuota = `-- name: DeleteQuota :exec
update quota set deleted_at = datetime('now') where id = ?
`

func (q *Queries) DeleteQuota(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteQuota, id)
	return err
}

const deleteTask = `-- name: DeleteTask :exec
update task set deleted_at = datetime('now') where id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const listDeletedProjectTasks = `-- name: ListDeletedProjectTasks :many
select id, project_id, deleted_at, name, description, size from project_task where project_id = ? and deleted_at is not null
`

func (q *Queries) ListDeletedProjectTasks(ctx context.Context, projectID int64) ([]ProjectTask, error) {
	rows, err := q.db.QueryContext(ctx, listDeletedProjectTasks, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectTask
	for rows.Next() {
		var i ProjectTask
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.DeletedAt,
			&i.Name,
			&i.Description,
			&i.Size,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDeletedProjects = `-- name: ListDeletedProjects :many
select id, deleted_at, name, description, deadline from project where deleted_at is not null
`

func (q *Queries) ListDeletedProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, listDeletedProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.DeletedAt,
			&i.Name,
			&i.Description,
			&i.Deadline,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDeletedQuotas = `-- name: ListDeletedQuotas :many
select id, deleted_at, description, fixed_time, duration, recurrence_interval from quota where deleted_at is not null
`

func (q *Queries) ListDeletedQuotas(ctx context.Context) ([]Quotum, error) {
	rows, err := q.db.QueryContext(ctx, listDeletedQuotas)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Quotum
	for rows.Next() {
		var i Quotum
		if err := rows.Scan(
			&i.ID,
			&i.DeletedAt,
			&i.Description,
			&i.FixedTime,
			&i.Duration,
			&i.RecurrenceInterval,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDeletedTasks = `-- name: ListDeletedTasks :many
select id, deleted_at, name, description, deadline, size, priority from task where deleted_at is not null
`

func (q *Queries) ListDeletedTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listDeletedTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.DeletedAt,
			&i.Name,
			&i.Description,
			&i.Deadline,
			&i.Size,
			&i.Priority,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjectTasks = `-- name: ListProjectTasks :many
select id, project_id, deleted_at, name, description, size from project_task where project_id = ? and deleted_at is null
`

func (q *Queries) ListProjectTasks(ctx context.Context, projectID int64) ([]ProjectTask, error) {
	rows, err := q.db.QueryContext(ctx, listProjectTasks, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectTask
	for rows.Next() {
		var i ProjectTask
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.DeletedAt,
			&i.Name,
			&i.Description,
			&i.Size,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjects = `-- name: ListProjects :many
select id, deleted_at, name, description, deadline from project where deleted_at is null
`

func (q *Queries) ListProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, listProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.DeletedAt,
			&i.Name,
			&i.Description,
			&i.Deadline,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQuotas = `-- name: ListQuotas :many
select id, deleted_at, description, fixed_time, duration, recurrence_interval from quota where deleted_at is null
`

func (q *Queries) ListQuotas(ctx context.Context) ([]Quotum, error) {
	rows, err := q.db.QueryContext(ctx, listQuotas)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Quotum
	for rows.Next() {
		var i Quotum
		if err := rows.Scan(
			&i.ID,
			&i.DeletedAt,
			&i.Description,
			&i.FixedTime,
			&i.Duration,
			&i.RecurrenceInterval,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasks = `-- name: ListTasks :many
select id, deleted_at, name, description, deadline, size, priority from task where deleted_at is null
`

func (q *Queries) ListTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.DeletedAt,
			&i.Name,
			&i.Description,
			&i.Deadline,
			&i.Size,
			&i.Priority,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readProject = `-- name: ReadProject :one
select id, deleted_at, name, description, deadline, size, priority from task where id = ? and deleted_at is null
`

func (q *Queries) ReadProject(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, readProject, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.DeletedAt,
		&i.Name,
		&i.Description,
		&i.Deadline,
		&i.Size,
		&i.Priority,
	)
	return i, err
}

const readProjectTask = `-- name: ReadProjectTask :one
select id, project_id, deleted_at, name, description, size from project_task where id = ? and deleted_at is null
`

func (q *Queries) ReadProjectTask(ctx context.Context, id int64) (ProjectTask, error) {
	row := q.db.QueryRowContext(ctx, readProjectTask, id)
	var i ProjectTask
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DeletedAt,
		&i.Name,
		&i.Description,
		&i.Size,
	)
	return i, err
}

const readQuota = `-- name: ReadQuota :one
select id, deleted_at, description, fixed_time, duration, recurrence_interval from quota where id = ? and deleted_at is null
`

func (q *Queries) ReadQuota(ctx context.Context, id int64) (Quotum, error) {
	row := q.db.QueryRowContext(ctx, readQuota, id)
	var i Quotum
	err := row.Scan(
		&i.ID,
		&i.DeletedAt,
		&i.Description,
		&i.FixedTime,
		&i.Duration,
		&i.RecurrenceInterval,
	)
	return i, err
}

const readTask = `-- name: ReadTask :one
select id, deleted_at, name, description, deadline, size, priority from task where id = ? and deleted_at is null
`

func (q *Queries) ReadTask(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, readTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.DeletedAt,
		&i.Name,
		&i.Description,
		&i.Deadline,
		&i.Size,
		&i.Priority,
	)
	return i, err
}

const unDeleteProject = `-- name: UnDeleteProject :exec
update project set deleted_at = null where id = ?
`

func (q *Queries) UnDeleteProject(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, unDeleteProject, id)
	return err
}

const unDeleteProjectTask = `-- name: UnDeleteProjectTask :exec
update project_task set deleted_at = null where id = ?
`

func (q *Queries) UnDeleteProjectTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, unDeleteProjectTask, id)
	return err
}

const unDeleteQuota = `-- name: UnDeleteQuota :exec
update quota set deleted_at = null where id = ?
`

func (q *Queries) UnDeleteQuota(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, unDeleteQuota, id)
	return err
}

const unDeleteTask = `-- name: UnDeleteTask :exec
update task set deleted_at = null where id = ?
`

func (q *Queries) UnDeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, unDeleteTask, id)
	return err
}

const updateProject = `-- name: UpdateProject :exec
update project set
    name = ?,
    description = ?,
    deadline = ?
where id = ?
`

type UpdateProjectParams struct {
	Name        string
	Description string
	Deadline    time.Time
	ID          int64
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) error {
	_, err := q.db.ExecContext(ctx, updateProject,
		arg.Name,
		arg.Description,
		arg.Deadline,
		arg.ID,
	)
	return err
}

const updateProjectTask = `-- name: UpdateProjectTask :exec
update project_task set
    name = ?,
    description = ?,
    size = ?
where id = ?
`

type UpdateProjectTaskParams struct {
	Name        string
	Description string
	Size        int64
	ID          int64
}

func (q *Queries) UpdateProjectTask(ctx context.Context, arg UpdateProjectTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateProjectTask,
		arg.Name,
		arg.Description,
		arg.Size,
		arg.ID,
	)
	return err
}

const updateQuota = `-- name: UpdateQuota :exec
update quota set
    fixed_time = ?,
    duration = ?,
    recurrence_interval = ?
where id = ?
`

type UpdateQuotaParams struct {
	FixedTime          int64
	Duration           int64
	RecurrenceInterval int64
	ID                 int64
}

func (q *Queries) UpdateQuota(ctx context.Context, arg UpdateQuotaParams) error {
	_, err := q.db.ExecContext(ctx, updateQuota,
		arg.FixedTime,
		arg.Duration,
		arg.RecurrenceInterval,
		arg.ID,
	)
	return err
}

const updateSettings = `-- name: UpdateSettings :exec
insert into settings(id, timezone) values (1, ?)
on conflict do update set
    timezone = excluded.timezone
`

func (q *Queries) UpdateSettings(ctx context.Context, timezone string) error {
	_, err := q.db.ExecContext(ctx, updateSettings, timezone)
	return err
}

const updateTask = `-- name: UpdateTask :exec
update task set 
    name = ?,
    description = ?,
    deadline = ?,
    size = ?,
    priority = ?
where id = ?
`

type UpdateTaskParams struct {
	Name        string
	Description string
	Deadline    time.Time
	Size        int64
	Priority    int64
	ID          int64
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateTask,
		arg.Name,
		arg.Description,
		arg.Deadline,
		arg.Size,
		arg.Priority,
		arg.ID,
	)
	return err
}
