// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createProject = `-- name: CreateProject :exec
insert into project(id, name, description, deadline) values (?, ?, ?, ?)
`

type CreateProjectParams struct {
	ID          int64
	Name        string
	Description sql.NullString
	Deadline    time.Time
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) error {
	_, err := q.db.ExecContext(ctx, createProject,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Deadline,
	)
	return err
}

const createProjectTask = `-- name: CreateProjectTask :exec
insert into project_task(id, project_id, name, description, size, challenge) values (?, ?, ?, ?, ?, ?)
`

type CreateProjectTaskParams struct {
	ID          int64
	ProjectID   int64
	Name        string
	Description sql.NullString
	Size        int64
	Challenge   int64
}

func (q *Queries) CreateProjectTask(ctx context.Context, arg CreateProjectTaskParams) error {
	_, err := q.db.ExecContext(ctx, createProjectTask,
		arg.ID,
		arg.ProjectID,
		arg.Name,
		arg.Description,
		arg.Size,
		arg.Challenge,
	)
	return err
}

const createQuota = `-- name: CreateQuota :exec
insert into quota(id, fixed_time, duration, recurrence_interval) values (?, ?, ?, ?)
`

type CreateQuotaParams struct {
	ID                 int64
	FixedTime          int64
	Duration           int64
	RecurrenceInterval int64
}

func (q *Queries) CreateQuota(ctx context.Context, arg CreateQuotaParams) error {
	_, err := q.db.ExecContext(ctx, createQuota,
		arg.ID,
		arg.FixedTime,
		arg.Duration,
		arg.RecurrenceInterval,
	)
	return err
}

const createTask = `-- name: CreateTask :exec
insert into task(id, name, description, deadline, size, challenge) values (?, ?, ?, ?, ?, ?)
`

type CreateTaskParams struct {
	ID          int64
	Name        string
	Description sql.NullString
	Deadline    time.Time
	Size        int64
	Challenge   int64
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) error {
	_, err := q.db.ExecContext(ctx, createTask,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Deadline,
		arg.Size,
		arg.Challenge,
	)
	return err
}

const deleteProject = `-- name: DeleteProject :exec
delete from project where id = ?
`

func (q *Queries) DeleteProject(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProject, id)
	return err
}

const deleteProjectTask = `-- name: DeleteProjectTask :exec
delete from project_task where id = ?
`

func (q *Queries) DeleteProjectTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProjectTask, id)
	return err
}

const deleteQuota = `-- name: DeleteQuota :exec
delete from quota where id = ?
`

func (q *Queries) DeleteQuota(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteQuota, id)
	return err
}

const deleteTask = `-- name: DeleteTask :exec
delete from task where id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const listProjectTasks = `-- name: ListProjectTasks :many
select id, project_id, name, description, size, challenge from project_task where project_id = ?
`

func (q *Queries) ListProjectTasks(ctx context.Context, projectID int64) ([]ProjectTask, error) {
	rows, err := q.db.QueryContext(ctx, listProjectTasks, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectTask
	for rows.Next() {
		var i ProjectTask
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Name,
			&i.Description,
			&i.Size,
			&i.Challenge,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjects = `-- name: ListProjects :many
select id, name, description, deadline from project
`

func (q *Queries) ListProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, listProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Deadline,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQuotas = `-- name: ListQuotas :many
select id, fixed_time, duration, recurrence_interval from quota
`

func (q *Queries) ListQuotas(ctx context.Context) ([]Quotum, error) {
	rows, err := q.db.QueryContext(ctx, listQuotas)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Quotum
	for rows.Next() {
		var i Quotum
		if err := rows.Scan(
			&i.ID,
			&i.FixedTime,
			&i.Duration,
			&i.RecurrenceInterval,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasks = `-- name: ListTasks :many
select id, name, description, deadline, size, challenge from task
`

func (q *Queries) ListTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Deadline,
			&i.Size,
			&i.Challenge,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readProject = `-- name: ReadProject :one
select id, name, description, deadline, size, challenge from task where id = ?
`

func (q *Queries) ReadProject(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, readProject, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Deadline,
		&i.Size,
		&i.Challenge,
	)
	return i, err
}

const readProjectTask = `-- name: ReadProjectTask :one
select id, project_id, name, description, size, challenge from project_task where id = ?
`

func (q *Queries) ReadProjectTask(ctx context.Context, id int64) (ProjectTask, error) {
	row := q.db.QueryRowContext(ctx, readProjectTask, id)
	var i ProjectTask
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.Size,
		&i.Challenge,
	)
	return i, err
}

const readQuota = `-- name: ReadQuota :one
select id, fixed_time, duration, recurrence_interval from quota where id = ?
`

func (q *Queries) ReadQuota(ctx context.Context, id int64) (Quotum, error) {
	row := q.db.QueryRowContext(ctx, readQuota, id)
	var i Quotum
	err := row.Scan(
		&i.ID,
		&i.FixedTime,
		&i.Duration,
		&i.RecurrenceInterval,
	)
	return i, err
}

const readTask = `-- name: ReadTask :one
select id, name, description, deadline, size, challenge from task where id = ?
`

func (q *Queries) ReadTask(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, readTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Deadline,
		&i.Size,
		&i.Challenge,
	)
	return i, err
}

const updateProject = `-- name: UpdateProject :exec
update project set
    name = ?,
    description = ?,
    deadline = ?
where id = ?
`

type UpdateProjectParams struct {
	Name        string
	Description sql.NullString
	Deadline    time.Time
	ID          int64
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) error {
	_, err := q.db.ExecContext(ctx, updateProject,
		arg.Name,
		arg.Description,
		arg.Deadline,
		arg.ID,
	)
	return err
}

const updateProjectTask = `-- name: UpdateProjectTask :exec
update project_task set
    name = ?,
    description = ?,
    size = ?,
    challenge = ?
where id = ?
`

type UpdateProjectTaskParams struct {
	Name        string
	Description sql.NullString
	Size        int64
	Challenge   int64
	ID          int64
}

func (q *Queries) UpdateProjectTask(ctx context.Context, arg UpdateProjectTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateProjectTask,
		arg.Name,
		arg.Description,
		arg.Size,
		arg.Challenge,
		arg.ID,
	)
	return err
}

const updateQuota = `-- name: UpdateQuota :exec
update quota set
    fixed_time = ?,
    duration = ?,
    recurrence_interval = ?
where id = ?
`

type UpdateQuotaParams struct {
	FixedTime          int64
	Duration           int64
	RecurrenceInterval int64
	ID                 int64
}

func (q *Queries) UpdateQuota(ctx context.Context, arg UpdateQuotaParams) error {
	_, err := q.db.ExecContext(ctx, updateQuota,
		arg.FixedTime,
		arg.Duration,
		arg.RecurrenceInterval,
		arg.ID,
	)
	return err
}

const updateTask = `-- name: UpdateTask :exec
update task set 
    name = ?,
    description = ?,
    deadline = ?,
    size = ?,
    challenge = ?
where id = ?
`

type UpdateTaskParams struct {
	Name        string
	Description sql.NullString
	Deadline    time.Time
	Size        int64
	Challenge   int64
	ID          int64
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateTask,
		arg.Name,
		arg.Description,
		arg.Deadline,
		arg.Size,
		arg.Challenge,
		arg.ID,
	)
	return err
}
